type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import server.Database;

    public class Main {

        public static void main(String[] args) {

        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            Database database = Database.getInstance();
            String input;
            while (true) {
                input = scanner.nextLine();
                System.out.println(database.handleInput(input.split(" ")));
            }
        }
    }
  learner_created: false
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    public class Database {

        private String[] cells;
        private static Database instance;

        private Database() {
            cells = new String[100];
            for (String cell : cells) {
                cell = "";
            }
        }

        public static Database getInstance() {
            if (instance == null) {
                instance = new Database();
            }
            return instance;
        }

        public String handleInput(String[] commands) {
            if (commands[0].equalsIgnoreCase("exit")) {
                System.exit(0);
            }
            if (indexOutOfBounds(Integer.parseInt(commands[1]))) {
                return "ERROR";
            }
            switch (commands[0]) {
                case "get":
                    try {
                        return get(Integer.parseInt(commands[1]));
                    } catch (Exception e) {
                        return "ERROR";
                    }
                case "set":
                    return set(Integer.parseInt(commands[1]), buildString(commands));
                case "delete":
                    return delete(Integer.parseInt(commands[1]));
                default:
                    return "ERROR";
            }
        }

        private String get(int index) throws Exception {
            if (cells[index - 1].equals("") || cells[index - 1] == null) {
                throw new Exception("ERROR");
            }
            return cells[index - 1];
        }

        private String set(int index, String value) {
            cells[index -1] = value;
            return "OK";
        }

        private String delete(int index) {
            cells[index - 1] = "";
            return "OK";
        }

        private boolean indexOutOfBounds(int index) {
            return index < 1 || index > 100;
        }

        private String buildString(String[] commands) {
            StringBuilder result = new StringBuilder();
            for (int i = 2; i < commands.length; i++) {
                result.append(commands[i]);
                result.append(" ");
            }
            result.deleteCharAt(result.length() - 1);
            return result.toString();
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram server = new TestedProgram("server");
            server.startInBackground();
            Thread.sleep(500);

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram("client");

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/server/Session.java
  visible: true
  learner_created: true
- name: src/server/Command.java
  visible: true
  learner_created: true
- name: src/server/Result.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5491#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 19 Aug 2021 12:39:51 UTC
record: 1

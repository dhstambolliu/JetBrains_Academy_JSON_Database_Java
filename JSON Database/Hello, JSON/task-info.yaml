type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import server.Database;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;

    public class Main {

        private static final String ADDRESS = "127.0.0.1";
        private static final int PORT = 2000;

        public static void main(String[] args) {
            start();
        }

        static void start() {
            System.out.println("Client started!");

            try (
                    Socket socket = new Socket(InetAddress.getByName(ADDRESS), PORT);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            ) {
                String message = "Give me a record # 3";
                System.out.println(message);
                output.writeUTF(message);
                System.out.println("Received: " + input.readUTF());
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.util.Scanner;

    public class Main {

        private static final String ADDRESS = "127.0.0.1";
        private static final int PORT = 2000;

        public static void main(String[] args) {
            // startDB();
            startServer();
        }

        static void startServer() {
            System.out.println("Server started!");
            try (ServerSocket server = new ServerSocket(PORT, 50, InetAddress.getByName(ADDRESS))) {

                Session session = new Session(server.accept());
                session.start();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        static void startDB() {
            Scanner scanner = new Scanner(System.in);
            Database database = Database.getInstance();
            String input;
            while (true) {
                input = scanner.nextLine();
                try {
                    System.out.println(database.handleInput(input.split(" ")));
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }
  learner_created: false
- name: src/server/Session.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;

    public class Session extends Thread {

        private final Socket socket;

        public Session(Socket socketForClient) {
            this.socket = socketForClient;
        }

        @Override
        public void run() {
            try (
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream())

            ) {
                System.out.println("Received: " + input.readUTF());
                String message = "A record # 3 was sent!";
                System.out.println("Sent: " + message);
                output.writeUTF(message);

                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";
        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        @DynamicTestingMethod
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

    }
  learner_created: false
- name: src/client/Request.java
  visible: true
  text: |
    package client;

    import com.beust.jcommander.Parameter;

    public class Request {
        @Parameter(names = { "-t", "--type" }, description = "CRUD operation")
        private String type;

        @Parameter(names = { "-i", "--index" }, description = "Index of the db cell")
        private int index;

        @Parameter(names = { "-m", "--message" }, description = "Value to save in 'set' operation")
        private String message;

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(type);
            sb.append(" ");
            sb.append(index);
            if (message != null) {
                sb.append(" ");
                sb.append(message);
            }
            return sb.toString();
        }
    }
  learner_created: true
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/server/models/Request.java
  visible: true
  learner_created: true
- name: src/server/models/Response.java
  visible: true
  learner_created: true
- name: src/server/models/RequestType.java
  visible: true
  learner_created: true
- name: src/server/models/Result.java
  visible: true
  text: |
    package server;

    public enum Result {
        OK, ERROR
    }
  learner_created: false
- name: src/server/controllers/Database.java
  visible: true
  text: |
    package server;

    public class Database {

        private String[] cells;
        private static Database instance;

        private Database() {
            cells = new String[100];
        }

        public static Database getInstance() {
            if (instance == null) {
                instance = new Database();
            }
            return instance;
        }

        public String handleInput(String[] commands) throws Exception {
            Command command = Command.valueOf(commands[0].toUpperCase());
            if (command == Command.EXIT) {
                System.exit(0);
            }
            if (indexOutOfBounds(Integer.parseInt(commands[1]))) {
                throw new Exception("ERROR");
            }
            switch (command) {
                case GET:
                    return get(Integer.parseInt(commands[1]));
                case SET:
                    return set(Integer.parseInt(commands[1]), buildString(commands));
                case DELETE:
                    return delete(Integer.parseInt(commands[1]));
                default:
                    throw new Exception("ERROR");
            }
        }

        private String get(int index) throws Exception {
            if (cells[index - 1] == null) {
                throw new Exception("ERROR");
            }
            return cells[index - 1];
        }

        private String set(int index, String value) {
            cells[index -1] = value;
            return "OK";
        }

        private String delete(int index) {
            cells[index - 1] = null;
            return "OK";
        }

        private boolean indexOutOfBounds(int index) {
            return index < 1 || index > 100;
        }

        private String buildString(String[] commands) {
            StringBuilder result = new StringBuilder();
            for (int i = 2; i < commands.length; i++) {
                result.append(commands[i]);
                result.append(" ");
            }
            result.deleteCharAt(result.length() - 1);
            return result.toString();
        }
    }
  learner_created: false
- name: src/server/repositories/DataRepository.java
  visible: true
  learner_created: true
- name: src/server/exceptions/NoSuchKeyException.java
  visible: true
  learner_created: true
- name: src/server/controllers/Controller.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5493#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 20 Aug 2021 10:55:24 UTC
record: 4

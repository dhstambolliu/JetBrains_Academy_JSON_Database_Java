type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import server.Database;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;

    public class Main {

        private static final String ADDRESS = "127.0.0.1";
        private static final int PORT = 2000;

        public static void main(String[] args) {
            start();
        }

        static void start() {
            System.out.println("Client started!");

            try (
                    Socket socket = new Socket(InetAddress.getByName(ADDRESS), PORT);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            ) {
                String message = "Give me a record # 3";
                System.out.println(message);
                output.writeUTF(message);
                System.out.println("Received: " + input.readUTF());
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.util.Scanner;

    public class Main {

        private static final String ADDRESS = "127.0.0.1";
        private static final int PORT = 2000;

        public static void main(String[] args) {
            // startDB();
            startServer();
        }

        static void startServer() {
            System.out.println("Server started!");
            try (ServerSocket server = new ServerSocket(PORT, 50, InetAddress.getByName(ADDRESS))) {

                Session session = new Session(server.accept());
                session.start();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        static void startDB() {
            Scanner scanner = new Scanner(System.in);
            Database database = Database.getInstance();
            String input;
            while (true) {
                input = scanner.nextLine();
                try {
                    System.out.println(database.handleInput(input.split(" ")));
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }
  learner_created: false
- name: src/server/Session.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;

    public class Session extends Thread {

        private final Socket socket;

        public Session(Socket socketForClient) {
            this.socket = socketForClient;
        }

        @Override
        public void run() {
            try (
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream())

            ) {
                System.out.println("Received: " + input.readUTF());
                String message = "A record # 3 was sent!";
                System.out.println("Sent: " + message);
                output.writeUTF(message);

                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        private static final String fileName = "db.json";
        private static final String clientDataPath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "client" + File.separator +
            "data";
        private static final String dbFilePath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "server" + File.separator +
            "data" + File.separator + fileName;

        private static int threadsCount;

        @DynamicTestingMethod
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            if (!Files.exists(Path.of(dbFilePath))) {
                return CheckResult.wrong("Can't find /server/data/db.json file.");
            }

            try (FileWriter fileWriter = new FileWriter(new File(dbFilePath))) {
                fileWriter.write("{}");
            } catch (IOException e) {
                return CheckResult.wrong("Close the db.json file before starting the tests.");
            }

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.correct();
            }

            String setRequest = JsonBuilder.newBuilder()
                .addValue("type", "set")
                .addValue("key", "name")
                .addValue("value", "Kate")
                .getAsJsonObject().toString();

            String getRequest = JsonBuilder.newBuilder()
                .addValue("type", "get")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            String deleteRequest = JsonBuilder.newBuilder()
                .addValue("type", "delete")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            try {
                Files.write(Paths.get(clientDataPath + File.separator + "testSet.json"), setRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testGet.json"), getRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testDelete.json"), deleteRequest.getBytes());
            } catch (IOException e) {
                throw new WrongAnswer("Can't create test files in /client/data/ folder.");
            }


            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult checkDataFolder() {

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find /client/data/ folder.");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testInputs() throws InterruptedException {

            threadsCount = getThreadCount();
            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-in", "testSet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "name")
                    .value("value", "Kate")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "Kate")
                );

            client = getClient();
            output = client.start("-in", "testDelete.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );

            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );
            checkIfThreadWasCreated();

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static int getThreadCount() {
            return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        private static void checkIfThreadWasCreated() {
            int total = getThreadCount();

             /*18 threads: 1 server thread and 17 client threads created during the test.
             If the server doesn't handle clients in a new thread then the difference between number of threads
             before and after the test should be equal 18 */
            if (total - threadsCount == 18) {
                throw new WrongAnswer("Looks like you don't process client connection in another thread.\n" +
                    "Every client request should be parsed and handled in a separate thread!");
            }
        }

        @AfterClass
        public static void deleteFiles() {
            try {
                Files.delete(Paths.get(clientDataPath + "testSet.json"));
                Files.delete(Paths.get(clientDataPath + "testGet.json"));
                Files.delete(Paths.get(clientDataPath + "testDelete.json"));
            } catch (IOException ignored) {
            }
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/server/models/Result.java
  visible: true
  text: |
    package server.models;

    public enum Result {
        OK, ERROR
    }
  learner_created: true
- name: src/server/models/Request.java
  visible: true
  text: |
    package server.models;

    import com.google.gson.Gson;

    import java.util.Optional;

    public class Request {
        private String type;
        private String key;
        private String value;

        private Request() {}

        public static Request deserializeFromJson(String json) {
            return new Gson().fromJson(json, Request.class);
        }

        public RequestType getRequestType() {
            return RequestType.getTypeFromString(this.type);
        }

        public Optional<String> getOptionalKey() {
            return Optional.of(key);
        }

        public Optional<String> getOptionalValue() {
            return Optional.of(value);
        }
    }
  learner_created: true
- name: src/server/exceptions/NoSuchKeyException.java
  visible: true
  text: |
    package server.exceptions;

    public class NoSuchKeyException extends IllegalArgumentException{
    }
  learner_created: true
- name: src/server/controllers/Controller.java
  visible: true
  text: |
    package server.controllers;

    import server.models.Request;
    import server.models.Response;
    import server.models.Result;

    public abstract class Controller {
        protected boolean exit;

        public boolean isExit() {
            return exit;
        }

        public Response handleRequest(Request request) {
            switch (request.getRequestType()) {
                case EXIT:
                    return handleExitRequest();
                case GET:
                    return handleGetRequest(request);
                case SET:
                    return handleSetRequest(request);
                case DELETE:
                    return handleDeleteRequest(request);
                default:
                    assert false : "Not all Enum constants handled";
                    return new Response.ResponseBuilder()
                            .setResponse(Result.ERROR)
                            .setReason("Unexpected Argument")
                            .build();
            }
        }
        protected abstract Response handleDeleteRequest(Request request);
        protected abstract Response handleSetRequest(Request request);
        protected abstract Response handleGetRequest(Request request);

        protected Response handleExitRequest() {
            this.exit = true;
            return new Response.ResponseBuilder()
                    .setResponse(Result.OK)
                    .build();
        }
    }
  learner_created: true
- name: src/server/repositories/DataRepository.java
  visible: true
  text: |
    package server.repositories;

    import server.exceptions.NoSuchKeyException;

    import java.util.HashMap;
    import java.util.Map;

    public class DataRepository {
        private final Map<String, String> dataSource;
        private static DataRepository instance;

        {
            dataSource = new HashMap<>();
        }

        private DataRepository() {}

        public static DataRepository getInstance() {
            if (instance == null) {
                instance = new DataRepository();
            }
            return instance;
        }

        public String get(String key) throws NoSuchKeyException {
            if (dataSource.containsKey(key)) {
                return dataSource.get(key);
            } else {
                throw new NoSuchKeyException();
            }
        }

        public void set(String key, String value) {
            dataSource.put(key, value);
        }

        public void delete(String key) {
            if (dataSource.containsKey(key)) {
                dataSource.remove(key);
            } else {
                throw new NoSuchKeyException();
            }
        }
    }
  learner_created: true
- name: src/server/controllers/Database.java
  visible: true
  text: |
    package server.controllers;

    import server.exceptions.NoSuchKeyException;
    import server.models.Request;
    import server.models.Response;
    import server.models.Result;
    import server.repositories.DataRepository;

    public class Database extends Controller {
        private final DataRepository source;

        public Database(DataRepository source) {
            this.source = source;
        }

        @Override
        protected Response handleDeleteRequest(Request request) {
            Response.ResponseBuilder response = new Response.ResponseBuilder();
            if (request.getOptionalKey().isPresent()) {
                String key = request.getOptionalKey().get();
                try {
                    source.delete(key);
                    response.setResponse(Result.OK);
                } catch (NoSuchKeyException e) {
                    response
                        .setResponse(Result.ERROR)
                        .setReason("No such key");
                }
            } else {
                assert false : "Expect Key to be passed with DELETE request";
                response
                    .setResponse(Result.ERROR)
                    .setReason("Expect Key to be passed with DELETE request");
            }
            return response.build();
        }

        @Override
        protected Response handleSetRequest(Request request) {
            Response.ResponseBuilder response = new Response.ResponseBuilder();
            if (
                request.getOptionalKey().isPresent() &&
                request.getOptionalValue().isPresent()
            ) {
                source.set(
                    request.getOptionalKey().get(),
                    request.getOptionalValue().get()
                );
                response.setResponse(Result.OK);
            } else {
                assert false : "Expect Key and value to be passed with SET request";
                response
                    .setResponse(Result.ERROR)
                    .setReason("Either key or value not passed with SET request");
            }
            return response.build();
        }

        @Override
        protected Response handleGetRequest(Request request) {
            Response.ResponseBuilder response = new Response.ResponseBuilder();
            if (request.getOptionalKey().isPresent()) {
                String key = request.getOptionalKey().get();
                try {
                    response
                        .setValue(source.get(key))
                        .setResponse(Result.OK);
                } catch (NoSuchKeyException e) {
                    response
                        .setResponse(Result.ERROR)
                        .setReason("No such key");
                }
            } else {
                assert false : "Expect Key to be passed with GET request";
            }
            return response.build();
        }
    }
  learner_created: true
- name: src/client/Request.java
  visible: true
  text: |
    package client;

    import com.beust.jcommander.Parameter;
    import com.google.gson.Gson;

    public class Request {
        @Parameter(names = { "-t", "--type" }, description = "CRUD operation")
        private String type;

        @Parameter(names = { "-k", "--key" }, description = "String key")
        private String key;

        @Parameter(names = { "-v", "--value" }, description = "Value to save in 'set' operation")
        private String value;

        @Override
        public String toString() {
            return new Gson().toJson(this);
        }
    }
  learner_created: true
- name: src/server/models/Response.java
  visible: true
  text: |
    package server.models;

    import com.google.gson.Gson;

    public class Response {
        private final String response;
        private final String value;
        private final String reason;

        public String serializeToJson() {
            return new Gson().toJson(this);
        }

        public Response(ResponseBuilder builder) {
            this.response = builder.response;
            this.value = builder.value;
            this.reason = builder.reason;
        }

        public static class ResponseBuilder {
            private String response;
            private String value;
            private String reason;

            public ResponseBuilder setResponse(Result result) {
                this.response = result == Result.OK ? "OK" : "ERROR";
                return this;
            }

            public ResponseBuilder setValue(String value) {
                this.value = value;
                return this;
            }

            public ResponseBuilder setReason(String reason) {
                this.reason = reason;
                return this;
            }

            public Response build() {
                return new Response(this);
            }
        }
    }
  learner_created: true
- name: src/server/models/RequestType.java
  visible: true
  text: |
    package server.models;

    public enum RequestType {
        EXIT("exit"),
        GET("get"),
        SET("set"),
        DELETE("delete");

        private final String stringRepresentation;

        RequestType(String stringRepresentation) {
            this.stringRepresentation = stringRepresentation;
        }

        public static RequestType getTypeFromString(String str) {
            switch (str) {
                case "get":
                    return RequestType.GET;
                case "set":
                    return RequestType.SET;
                case "delete":
                    return RequestType.DELETE;
                case "exit":
                    return RequestType.EXIT;
                default:
                    assert false : "Invalid Request type passed";
                    return null;
            }
        }

        @Override
        public String toString() {
            return stringRepresentation;
        }
    }
  learner_created: true
- name: test/JsonRequestBuilder.java
  visible: false
  text: |-
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;

    class JsonBuilder {

        private final Gson gson = new Gson();
        private final JsonObject jsonObject = new JsonObject();

        private JsonBuilder() {
        }

        public static JsonBuilder newBuilder() {
            return new JsonBuilder();
        }

        public JsonBuilder addValue(String key, String value) {
            jsonObject.addProperty(key, value);
            return this;
        }

        public JsonBuilder addJsonObject(String key, JsonObject object) {
            jsonObject.add(key, object);
            return this;
        }

        public String getAsString() {
            return jsonObject.toString();
        }

        public JsonObject getAsJsonObject() {
            return jsonObject;
        }
    }
  learner_created: false
- name: src/server/data/db.json
  visible: true
  learner_created: true
- name: src/client/data/testGet.json
  visible: true
  learner_created: true
- name: src/client/data/testDelete.json
  visible: true
  learner_created: true
- name: src/client/data/testSet.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5494#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 24 Aug 2021 10:09:17 UTC
record: 5
